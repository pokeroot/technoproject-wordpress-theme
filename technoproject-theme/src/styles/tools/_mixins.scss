// technoproject-theme/src/styles/tools/_mixins.scss
@import '../settings/variables'; // Import variables to be used in mixins

// Responsive breakpoint manager
// Example: @include respond-to(md) { ...styles... }
// @mixin respond-to($breakpoint) {
//   @if map-has-key($breakpoints, $breakpoint) {
//     @media (min-width: map-get($breakpoints, $breakpoint)) {
//       @content;
//     }
//   } @else {
//     @warn "Breakpoint `#{$breakpoint}` not found in $breakpoints map. Available breakpoints: #{map-keys($breakpoints)}";
//   }
// }

// Helper map for respond-to, assuming $breakpoints are defined in _variables.scss
// If not, define them here or ensure they are available.
// For this example, I'll use the direct variable names from _variables.scss
// A map is cleaner if you have many breakpoints.

// Using direct variables (ensure _variables.scss is imported before this file in main.scss)
@mixin respond-to-sm {
  @media (min-width: $breakpoint-sm) { @content; }
}
@mixin respond-to-md {
  @media (min-width: $breakpoint-md) { @content; }
}
@mixin respond-to-lg {
  @media (min-width: $breakpoint-lg) { @content; }
}
@mixin respond-to-xl {
  @media (min-width: $breakpoint-xl) { @content; }
}
@mixin respond-to-2xl {
  @media (min-width: $breakpoint-2xl) { @content; }
}

// Button variant generator (as per document)
// Example: @include button-variant($color-primary, white);
@mixin button-variant($bg-color, $text-color: white, $border-color: $bg-color, $hover-darken-percent: 10%) {
  background-color: $bg-color;
  color: $text-color;
  border: 1px solid $border-color;
  transition: all $transition-base;

  &:hover:not(:disabled):not(.loading) {
    background-color: darken($bg-color, $hover-darken-percent);
    border-color: darken($border-color, $hover-darken-percent);
    transform: translateY(-1px); // Slight lift effect
    box-shadow: $shadow-md;     // Add some shadow
  }

  &:active:not(:disabled):not(.loading) {
    transform: translateY(0);
    box-shadow: $shadow-sm;
  }

  &:disabled,
  &.loading { // Assuming a .loading class can be added to the button
    opacity: 0.65; // Standard disabled opacity
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
}

// Card elevation (as per document)
// Example: @include card-elevation(3);
@mixin card-elevation($level: 1) {
  @if $level == 1 {
    box-shadow: $shadow-sm;
  } @else if $level == 2 {
    box-shadow: $shadow-base;
  } @else if $level == 3 {
    box-shadow: $shadow-md;
  } @else if $level == 4 {
    box-shadow: $shadow-lg;
  } @else if $level == 5 {
    box-shadow: $shadow-xl;
  } @else {
    box-shadow: none;
  }
  transition: box-shadow $transition-base, transform $transition-base; // Added transform for hover effects
}

// Focus ring (as per document)
// Example: &:focus-visible { @include focus-ring; }
@mixin focus-ring($color: $color-secondary, $width: 3px, $offset: 2px) {
  outline: none;
  // Using box-shadow for a more flexible focus ring that follows border-radius
  // box-shadow: 0 0 0 $offset $color-white, 0 0 0 ($offset + $width) rgba($color, 0.5); // Example with outline and inline shadow
  box-shadow: 0 0 0 $width rgba($color, 0.4);
}

// Visually hidden class for accessibility (screen reader only content)
@mixin visually-hidden {
     position: absolute;
     width: 1px;
     height: 1px;
     padding: 0;
     margin: -1px;
     overflow: hidden;
     clip: rect(0, 0, 0, 0);
     white-space: nowrap; /* added */
     border: 0;
 }

 // Clearfix for float containment
 @mixin clearfix {
     &::after {
         content: "";
         display: table;
         clear: both;
     }
 }

 // Text truncation with ellipsis for single line
 // Example: @include truncate;
 @mixin truncate {
     overflow: hidden;
     text-overflow: ellipsis;
     white-space: nowrap;
 }

 // Multi-line text truncation (requires display: -webkit-box)
 // Example: @include truncate-lines(3);
 @mixin truncate-lines($lines: 2) {
     display: -webkit-box;
     -webkit-line-clamp: $lines;
     -webkit-box-orient: vertical;
     overflow: hidden;
     text-overflow: ellipsis;
 }
